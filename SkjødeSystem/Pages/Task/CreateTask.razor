@page "/createtask/{ApartmentId}"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using MongoDB.Bson

<PageTitle>CreateTask</PageTitle>

<EditForm Model="@task" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

<div class="shadow overflow-hidden sm:rounded-md bg-white dark:bg-black">


 <div class="grid grid-cols-6 gap-6">
  <div class="relative px-4 py-5 sm:p-6">
   <h3>Ny Opgave:</h3>

    <div class="col-span-6 sm:col-span-3">
        <label for="taskName">Opgave Navn:</label>
        <InputText id="taskName" class="form-control" @bind-Value="task.TaskName" placeholder="Navn på opgaven" />
    </div>

    <div class="col-span-6 sm:col-span-3">
        <label for="description">Beskrivelse:</label>
        <textarea id="description" class="form-control" @bind="task.Description" placeholder="Tilføj en beskrivelse til opgaven"> </textarea>
    </div>

    <div class="col-span-6 sm:col-span-3">
        <label for="type">Type:</label>
        <InputSelect id="type" class="form-control" @bind-Value="task.Type">
            @foreach (var type in Types)
            {
               <option value="@type">@type</option>
            }
        </InputSelect>
    </div>
    
    @* <div class="col-span-6 sm:col-span-3">
        <label for="ToDo">Tilføj Mangelliste:</label>
        <InputFile id="ToDo" class="form-control" @bind-Value="task.ToDoPDF" />
    </div> *@

    <div class="col-span-6 sm:col-span-3">
        <label for="startDate">Start Dato:</label>
        <InputDate id="startDate" class="form-control" @bind-Value="task.StartDate" />
    </div>

    <div class="col-span-6 sm:col-span-3">
        <label for="EndDate">Afsluttes før:</label>
        <InputDate id="EndDate" class="form-control" @bind-Value="task.EndDate" />
    </div>

    <div class="col-span-6 sm:col-span-3">
        <label for="status">Status:</label>
        <InputSelect id="status" class="form-control" @bind-Value="task.Status">
            @foreach (var status in Statuses)
            {
                <option value="@status">@status</option>
            }
        </InputSelect>

    <div class="col-span-6 sm:col-span-3">
         <label for="status">Udføres af:</label>
                        <InputSelect id="subcontractorSelect" class="form-control" @bind-Value="selectedSubcontractorId">
               @foreach (var subconctractor in subcontractors)
               {
                  <option value="@subconctractor.UserId">@subconctractor.SubcontractorName</option>
               }
               <p> @selectedSubcontractorId</p>
           </InputSelect>
    </div>

    <div class="col-span-6 sm:col-span-3">
         <label for="address">Opretter opgave for:</label>
         <InputText id="address" class="form-control" @bind-Value="task.AssignedApartment.Address" readonly />
    </div> 

     <div class="col-span-6 sm:col-span-3">
          <label for="comment">Kommentar:</label>
          <InputText id="comment" class="form-control" @bind-Value="task.Comment" placeholder="Kommentar fra UE" readonly />
     </div>

     <div class="mt-4 px-4 py-3 bg-gray-50 dark:bg-gray-900 text-right sm:px-6">
        <div class="flex justify-between items-center">
        <button type="submit" class="btn btn-primary">Opret Opgave</button>
        </div>
     </div>

                    @if (isSuccess)
                    {
                        <div class="alert alert-success mt-3">
                            Opgaven blev oprettet succesfuldt!
                        </div>
                    }

                    @if (isError)
                    {
                        <div class="alert alert-danger mt-3">
                            Der opstod en fejl under oprettelsen af Opgaven.
                        </div>
                    }

  </div>
 </div>
</div>
</div>

</EditForm>

@code {

    private List<string> Statuses = new() { "Afventer", "Igangværende", "Færdiggjort", };
    private List<string> Types = new() { "1 års eftersyn", "5 års eftersyn", };
    private TaskItem task = new TaskItem
        {
            AssignedTo = new Subcontractor(),
            AssignedApartment = new Apartment(),
        };
    private List<Subcontractor> subcontractors = new List<Subcontractor>();
    private string selectedSubcontractorId;
    private bool isSuccess = false;
    private bool isError = false;


    protected override async Task OnInitializedAsync()
    {
        // Henter liste af subcontractors:
        subcontractors = await Http.GetFromJsonAsync<List<Subcontractor>>("https://localhost:7210/api/User/GetSubcontractors");

        // Hent Apartment ved at bruge ApartmentId fra URL
        var apartment = await Http.GetFromJsonAsync<Apartment>($"https://localhost:7210/api/Apartment/GetApartmentById{ApartmentId}");
        task.AssignedApartment = apartment ?? new Apartment();

    }


    private void HandleSubcontractorSelection()
    {
        var selectedsubcontractor = subcontractors.FirstOrDefault(s => s.UserId == selectedSubcontractorId);


        if (selectedsubcontractor != null)
        {
            // Tildel hele objektet til AssignedTo
            task.AssignedTo = new Subcontractor
                {
                    UserId = selectedsubcontractor.UserId,
                    UserName = selectedsubcontractor.UserName,
                    Role = selectedsubcontractor.Role,
                    Email = selectedsubcontractor.Email,
                    Phone = selectedsubcontractor.Phone,
                    SubcontractorName = selectedsubcontractor.SubcontractorName,
                    Password = selectedsubcontractor.Password
                };
        }
    }


    private async Task HandleValidSubmit()
    {

        HandleSubcontractorSelection();

        //Generer ID til task
        task.TaskId = ObjectId.GenerateNewId().ToString();
        Console.WriteLine($"Task: {task.TaskId}, AssignedTo: {task.AssignedTo?.SubcontractorName}, AssignedApartment: {task.AssignedApartment?.Address}");

        // Make HTTP POST request to save the listing
        var response = await Http.PostAsJsonAsync("https://localhost:7210/api/Task/AddTask", task);

        if (response.IsSuccessStatusCode)
        {
            isSuccess = true;
            isError = false;
        }
        else
        {
            isSuccess = false;
            isError = true;
        }
        var errorDetails = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"Error: {errorDetails}");
    }

    [Parameter]
    public string ApartmentId { get; set; } //Parameter modtaget som streng fra viewapartment
}
