@page "/Viewalltasks"
@inject NavigationManager NavigationManager
@using MongoDB.Bson;
@inject HttpClient Http;
@inject ITaskService TaskService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Alle Opgaver</PageTitle>


<h3>Alle Opgaver</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Navn</th>
            <th>Addresse</th>
            <th>Status</th>
            <th>Udføres af</th>
            <th>Slet Opgave</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in tasks)
        {
                <tr>
                    <td>@task.TaskId</td>
                    <td>
                        <button class="btn btn-link" @onclick="() => NavigateToUpdateTask(task.TaskId)">
                            @task.TaskName
                        </button>
                    </td>
                    <td>
                        @task.AssignedApartment.Address
                    </td>
                    <td>
                       @task.Status
                    </td>
                    <td>
                        @task.AssignedTo.SubcontractorName
                    </td>
                    <td>
                    <button class="btn btn-danger" @onclick="() => DeleteTask(task.TaskId)">
                        Slet Opgave
                    </button>
                    </td>
                </tr>
            
        }
    </tbody>
</table>

@code {
    private List<TaskItem> tasks = new List<TaskItem>();

    private string searchQuery = "";

    private string selectedFilter = "Alle";
    private Admin? currentUser;


    private void NavigateToUpdateTask(string TaskId)
    {

        NavigationManager.NavigateTo($"/updatetask/{TaskId}");
    }


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        //Tjekker nuværende bruger:
        currentUser = await localStorage.GetItemAsync<Admin>("user");
        if (currentUser == null || currentUser.Role != "Admin")
        {
            NavigationManager.NavigateTo("/login");
        }

        // Henter liste af alle opgaver:
        tasks = await TaskService.GetAllTasks();

        if (tasks == null || !tasks.Any())
        {
            // Hvis ingen opgaver findes, kan du vise en besked
            Console.WriteLine("No tasks found");
        }

    }

    private async Task DeleteTask(string taskId)
    {
        await TaskService.DeleteTask(taskId);
        // Eventuelt opdater UI efter sletning
        tasks = await TaskService.GetAllTasks();
    }

}
