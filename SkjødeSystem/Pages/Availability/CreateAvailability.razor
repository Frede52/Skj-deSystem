@page "/createavailability/{UserId}"
@inject HttpClient Http
@inject IApartmentService ApartmentService

<h3>Opret Ledighed</h3>

@if (apartment == null)
{
    <div class="alert alert-danger">No apartment found for this user.</div>
}
else
{
    <div class="mb-3">
        <h4>Lejligheds Adresse: @apartment.Address</h4>
    </div>

    <EditForm Model="@availability" OnValidSubmit="SaveAvailability">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="datePicker">Vælg Dato:</label>
            <InputDate TValue="DateTime" id="datePicker" class="form-control" @bind-Value="availability.Date" />
        </div>

        <div>
            <label for="timeInput">Vælg Tid (timer/min):</label>
            <input id="timeInput" type="text" class="form-control" @bind="timeInput" />
            @if (isTimeInputInvalid)
            {
                <span class="text-danger">Invalid time format. Please use HH:mm.</span>
            }
        </div>

        <div>
            <button class="btn btn-primary mt-3" type="submit">Gem Ledighed</button>
        </div>
    </EditForm>

    @if (Message != null)
    {
        <p class="text-success mt-3">@Message</p>
    }

    <hr />

    <h3>Ledighed for Lejligheden</h3>
    @if (availabilityDates == null || !availabilityDates.Any())
    {
        <p>No availabilities found.</p>
    }
    else
    {
        <ul>
            @foreach (var avail in availabilityDates)
            {
                <li>@avail.Date.ToString("dd.MM.yyyy") @avail.Date.TimeOfDay.ToString(@"hh\:mm")</li>
            }
        </ul>
    }
}

@code {
    private Apartment apartment; 
    private List<Availability> availabilityDates = new List<Availability>();
    private string Message;
    private Availability availability = new Availability
        {
            Date = DateTime.Today 
        };
    private string timeInput = "00:00"; 
    private bool isTimeInputInvalid = false; 

    [Parameter]
    public string UserId { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        try
        {

            apartment = await ApartmentService.GetApartmentByUserId(UserId);

            if (apartment == null)
            {
                Message = "No apartment found for this user.";
                return;
            }


            availabilityDates = await ApartmentService.GetAvailabilityByApartmentId(apartment.ApartmentId);

            if (availabilityDates == null || !availabilityDates.Any())
            {
                Message = "No availability dates found for this apartment.";
            }
        }
        catch (Exception ex)
        {

        }
    }

    private async Task SaveAvailability()
    {
        if (availability.Date == DateTime.MinValue)
        {
            Message = "Please select a valid date.";
            return;
        }

        if (!TimeSpan.TryParseExact(timeInput, @"hh\:mm", null, out var parsedTime))
        {
            isTimeInputInvalid = true;
            return;
        }

        isTimeInputInvalid = false;


        availability.Date = availability.Date.Date + parsedTime;


        apartment.Availability ??= new List<Availability>();
        apartment.Availability.Add(availability);

        var success = await ApartmentService.UpdateApartmentAvailability(apartment.ApartmentId, apartment.Availability);

        if (success)
        {
            availability = new Availability
                {
                    Date = DateTime.Today
                };
            timeInput = "00:00"; // Reset time input
            Message = "Ledighed gemt med succes!";
        }
    }
}
