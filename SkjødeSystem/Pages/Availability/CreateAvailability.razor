@page "/createavailability"

<h3>Opret Ledighed</h3>

@if (apartment == null)
{
    <div class="alert alert-danger">No apartment found for this user.</div>
}
else
{
    <div class="mb-3">
        <h4>Apartment Address: @apartment.Address</h4>
    </div>

    <EditForm Model="@availability" OnValidSubmit="SaveAvailability">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="datePicker">Select Date:</label>
            <InputDate id="datePicker" class="form-control" @bind-Value="availability.Date" />
            @if (availability.Date == DateTime.MinValue)
            {
                <span class="text-danger">Please select a valid date.</span>
            }
        </div>

        <div>
            <button class="btn btn-primary mt-3" type="submit">Save Availability</button>
        </div>
    </EditForm>

@if (Message != null)
{
    <p class="text-success">@Message</p>
}

<hr />

    <h3>Availabilities for Apartment</h3>
    @if (availabilityDates == null || !availabilityDates.Any())
    {
        <p>No availabilities found.</p>
    }
    else
    {
        <ul>
            @foreach (var avail in availabilityDates)
            {
                <li>@avail.Date.ToShortDateString()</li>
            }
        </ul>
    }
}

@code {
    private int ApartmentID;
    private DateTime SelectedDate = DateTime.Now;
    private string EnteredTime = "";
    private bool IsTimeValid = true;
    private List<Availability> Availabilities = new();
    private string Message;
    private Availability availability = new Availability();

    [Parameter]
    public string UserId { get; set; } // Correctly matches the @page directive

    private void SaveAvailability()
    {
       

        if (!ValidateTime(EnteredTime))
        {
            Message = "Please enter a valid time in HH:MM format.";
            IsTimeValid = false;
            return;
        }


        var parsedTime = TimeOnly.Parse(EnteredTime);


            if (availabilityDates == null || !availabilityDates.Any())
            {
                Message = "No availability dates found for this apartment.";
            }
        }
        catch (Exception ex)
        {
          
        }
    }

        Availabilities.Add(availability);

        availability.Date = availability.Date.ToLocalTime().Date;


        // Add the new availability to the apartment's availability list
        apartment.Availability ??= new List<Availability>(); // Ensure the list is initialized
        apartment.Availability.Add(availability);

        // Update the apartment with the new availability list
        await Http.PutAsJsonAsync($"https://localhost:7210/api/Apartment/UpdateAvailability/{apartment.ApartmentId}", apartment.Availability);

        // Reset the form for a new entry
        availability = new Availability();
    }
}
